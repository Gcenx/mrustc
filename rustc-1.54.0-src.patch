# mrustc is much better at enum packing, so causes almost all of these to be smaller by one pointer
--- compiler/rustc_ast/src/ast.rs
+++ compiler/rustc_ast/src/ast.rs
@@ -1075,7 +1075,7 @@ pub struct Expr {
 }
 
 // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(not(rust_compiler = "mrustc"), target_arch = "x86_64", target_pointer_width = "64"))]
 rustc_data_structures::static_assert_size!(Expr, 104);
 
 impl Expr {
@@ -2779,7 +2779,7 @@ pub enum AssocItemKind {
     MacCall(MacCall),
 }
 
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(not(rust_compiler = "mrustc"), target_arch = "x86_64", target_pointer_width = "64"))]
 rustc_data_structures::static_assert_size!(AssocItemKind, 72);
 
 impl AssocItemKind {
@@ -2831,7 +2831,7 @@ pub enum ForeignItemKind {
     MacCall(MacCall),
 }
 
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(not(rust_compiler="mrustc"),target_arch = "x86_64", target_pointer_width = "64"))]
 rustc_data_structures::static_assert_size!(ForeignItemKind, 72);
 
 impl From<ForeignItemKind> for ItemKind {
--- compiler/rustc_hir/src/hir.rs
+++ compiler/rustc_hir/src/hir.rs
@@ -3050,3 +3050,3 @@
 // Some nodes are used a lot. Make sure they don't unintentionally get bigger.
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(not(rust_compiler="mrustc"),target_arch = "x86_64", target_pointer_width = "64"))]
 mod size_asserts {
--- compiler/rustc_middle/src/mir/interpret/error.rs
+++ compiler/rustc_middle/src/mir/interpret/error.rs
@@ -452,2 +452,2 @@
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(not(rust_compiler="mrustc"), target_arch = "x86_64", target_pointer_width = "64"))]
 static_assert_size!(InterpError<'_>, 64);
--- compiler/rustc_middle/src/mir/mod.rs
+++ compiler/rustc_middle/src/mir/mod.rs
@@ -2203,2 +2203,2 @@
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(not(rust_compiler="mrustc"), target_arch = "x86_64"))]
 static_assert_size!(AggregateKind<'_>, 48);
--- compiler/rustc_middle/src/thir.rs
+++ compiler/rustc_middle/src/thir.rs
@@ -147,2 +147,2 @@
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(not(rust_compiler="mrustc"), target_arch = "x86_64", target_pointer_width = "64"))]
 rustc_data_structures::static_assert_size!(Expr<'_>, 144);
--- compiler/rustc_mir/src/interpret/place.rs
+++ compiler/rustc_mir/src/interpret/place.rs
@@ -91,2 +91,2 @@
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(not(rust_compiler = "mrustc"), target_arch = "x86_64", target_pointer_width = "64"))]
 rustc_data_structures::static_assert_size!(Place, 64);
@@ -100,2 +100,2 @@
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(not(rust_compiler = "mrustc"), target_arch = "x86_64", target_pointer_width = "64"))]
 rustc_data_structures::static_assert_size!(PlaceTy<'_>, 80);
--- compiler/rustc_mir/src/interpret/operand.rs
+++ compiler/rustc_mir/src/interpret/operand.rs
@@ -35,2 +35,2 @@
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(not(rust_compiler = "mrustc"), target_arch = "x86_64", target_pointer_width = "64"))]
 rustc_data_structures::static_assert_size!(Immediate, 56);
@@ -90,2 +90,2 @@
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(not(rust_compiler = "mrustc"), target_arch = "x86_64", target_pointer_width = "64"))]
 rustc_data_structures::static_assert_size!(ImmTy<'_>, 72);

#
# Disable crc32fast's use of stdarch
#
--- vendor/crc32fast/src/specialized/mod.rs
+++ vendor/crc32fast/src/specialized/mod.rs
@@ -1,5 +1,6 @@
 cfg_if! {
     if #[cfg(all(
+        not(rust_compiler = "mrustc"),
         crc32fast_stdarchx86,
         any(target_arch = "x86", target_arch = "x86_64")
     ))] {

#
# Disable std_detect's detection logic (use the same logic as miri)
#
--- library/stdarch/crates/std_detect/src/detect/mod.rs
+++ library/stdarch/crates/std_detect/src/detect/mod.rs
@@ -88,2 +88,2 @@
 cfg_if! {
-    if #[cfg(miri)] {
+    if #[cfg(any(miri, rust_compiler = "mrustc"))] {

# PPV-Lite also needs to know that we're pretending to be miri
--- vendor/ppv-lite86/src/lib.rs
+++ vendor/ppv-lite86/src/lib.rs
@@ -12,10 +12,10 @@
-#[cfg(all(feature = "simd", target_arch = "x86_64", not(miri)))]
+#[cfg(all(feature = "simd", target_arch = "x86_64", not(miri), not(rust_compiler = "mrustc")))]
 pub mod x86_64;
-#[cfg(all(feature = "simd", target_arch = "x86_64", not(miri)))]
+#[cfg(all(feature = "simd", target_arch = "x86_64", not(miri), not(rust_compiler = "mrustc")))]
 use self::x86_64 as arch;
 
-#[cfg(any(miri, not(all(feature = "simd", any(target_arch = "x86_64")))))]
+#[cfg(any(miri, rust_compiler = "mrustc", not(all(feature = "simd", any(target_arch = "x86_64")))))]
 pub mod generic;
-#[cfg(any(miri, not(all(feature = "simd", any(target_arch = "x86_64")))))]
+#[cfg(any(miri, rust_compiler = "mrustc", not(all(feature = "simd", any(target_arch = "x86_64")))))]
 use self::generic as arch;

#
# Switch to emulated TLV
#
--- library/std/src/sys/unix/thread_local_dtor.rs
+++ library/std/src/sys/unix/thread_local_dtor.rs
@@ -61,7 +61,7 @@ pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8)) {
     #[thread_local]
     static REGISTERED: Cell<bool> = Cell::new(false);
     if !REGISTERED.get() {
-        _tlv_atexit(run_dtors, ptr::null_mut());
+        __cxa_thread_atexit(run_dtors, ptr::null_mut());
         REGISTERED.set(true);
     }
 
@@ -75,7 +75,7 @@ pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8)) {
     }
 
     extern "C" {
-        fn _tlv_atexit(dtor: unsafe extern "C" fn(*mut u8), arg: *mut u8);
+        fn __cxa_thread_atexit(dtor: unsafe extern "C" fn(*mut u8), arg: *mut u8);
     }
 
     let list: &mut List = &mut *DTORS.get();
--- src/llvm-project/clang/lib/Basic/Targets/OSTargets.h
+++ src/llvm-project/clang/lib/Basic/Targets/OSTargets.h
@@ -92,7 +92,7 @@ public:
     this->TLSSupported = false;

     if (Triple.isMacOSX())
-      this->TLSSupported = !Triple.isMacOSXVersionLT(10, 7);
+      this->TLSSupported = !Triple.isMacOSXVersionLT(10, 4);
     else if (Triple.isiOS()) {
       // 64-bit iOS supported it from 8 onwards, 32-bit device from 9 onwards,
       // 32-bit simulator from 10 onwards.
--- src/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
+++ src/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
@@ -2487,7 +2487,7 @@ static void emitGlobalDtorWithCXAAtExit(CodeGenFunction &CGF,
   const char *Name = "__cxa_atexit";
   if (TLS) {
     const llvm::Triple &T = CGF.getTarget().getTriple();
-    Name = T.isOSDarwin() ?  "_tlv_atexit" : "__cxa_thread_atexit";
+    Name = (T.isOSDarwin() && !T.isMacOSXVersionLT(10, 7)) ?  "_tlv_atexit" : "__cxa_thread_atexit";
   }

   // We're assuming that the destructor function is something we can
--- src/llvm-project/llvm/include/llvm/ADT/Triple.h
+++ src/llvm-project/llvm/include/llvm/ADT/Triple.h
@@ -809,7 +809,7 @@ public:

   /// Tests whether the target uses emulated TLS as default.
   bool hasDefaultEmulatedTLS() const {
-    return isAndroid() || isOSOpenBSD() || isWindowsCygwinEnvironment();
+    return isAndroid() || isOSOpenBSD() || isWindowsCygwinEnvironment() || isMacOSXVersionLT(10, 7);
   }

   /// Tests whether the target uses -data-sections as default.
diff --git src/llvm-project/llvm/lib/ObjectYAML/MachOYAML.cpp src/llvm-project/llvm/lib/ObjectYAML/MachOYAML.cpp
index 5a27d37c..755d4463 100644
--- src/llvm-project/llvm/lib/ObjectYAML/MachOYAML.cpp
+++ src/llvm-project/llvm/lib/ObjectYAML/MachOYAML.cpp
@@ -21,6 +21,20 @@
 #include <cstdint>
 #include <cstring>
 
+#ifdef __APPLE__
+#include <Availability.h>
+#if __MAC_OS_X_VERSION_MIN_REQUIRED < 1070
+static size_t strnlen(const char *s, size_t maxlen) {
+  size_t l = 0;
+  while (l < maxlen && *s) {
+    l++;
+    s++;
+  }
+  return l;
+}
+#endif
+#endif
+
 namespace llvm {
 
 MachOYAML::LoadCommand::~LoadCommand() = default;
diff --git src/llvm-project/llvm/tools/llvm-objcopy/MachO/MachOReader.cpp src/llvm-project/llvm/tools/llvm-objcopy/MachO/MachOReader.cpp
index 548a85bd..69594b9e 100644
--- src/llvm-project/llvm/tools/llvm-objcopy/MachO/MachOReader.cpp
+++ src/llvm-project/llvm/tools/llvm-objcopy/MachO/MachOReader.cpp
@@ -13,6 +13,20 @@
 #include "llvm/Support/Errc.h"
 #include <memory>
 
+#ifdef __APPLE__
+#include <Availability.h>
+#if __MAC_OS_X_VERSION_MIN_REQUIRED < 1070
+static size_t strnlen(const char *s, size_t maxlen) {
+  size_t l = 0;
+  while (l < maxlen && *s) {
+    l++;
+    s++;
+  }
+  return l;
+}
+#endif
+#endif
+
 namespace llvm {
 namespace objcopy {
 namespace macho {
diff --git src/llvm-project/llvm/tools/llvm-readobj/ObjDumper.cpp src/llvm-project/llvm/tools/llvm-readobj/ObjDumper.cpp
index fc91d81f..3b08720c 100644
--- src/llvm-project/llvm/tools/llvm-readobj/ObjDumper.cpp
+++ src/llvm-project/llvm/tools/llvm-readobj/ObjDumper.cpp
@@ -20,6 +20,20 @@
 #include "llvm/Support/raw_ostream.h"
 #include <map>
 
+#ifdef __APPLE__
+#include <Availability.h>
+#if __MAC_OS_X_VERSION_MIN_REQUIRED < 1070
+static size_t strnlen(const char *s, size_t maxlen) {
+  size_t l = 0;
+  while (l < maxlen && *s) {
+    l++;
+    s++;
+  }
+  return l;
+}
+#endif
+#endif
+
 namespace llvm {
 
 static inline Error createError(const Twine &Msg) {
diff --git src/llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp src/llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp
index 49347431..8afccb3f 100644
--- src/llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp
+++ src/llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp
@@ -15,7 +15,21 @@
 #include "llvm/Support/ErrorHandling.h"
 #include "llvm/Support/LEB128.h"
 
-#include <string.h> // for memcpy
+#include <string.h> // for memcpy and strnlen
+
+#ifdef __APPLE__
+#include <Availability.h>
+#if __MAC_OS_X_VERSION_MIN_REQUIRED < 1070
+static size_t strnlen(const char *s, size_t maxlen) {
+  size_t l = 0;
+  while (l < maxlen && *s) {
+    l++;
+    s++;
+  }
+  return l;
+}
+#endif
+#endif
 
 using namespace llvm;
 
--- library/std/src/sys/unix/condvar.rs
+++ library/std/src/sys/unix/condvar.rs
@@ -157,14 +157,14 @@ impl Condvar {
     }

     #[inline]
-    #[cfg(not(target_os = "dragonfly"))]
+    #[cfg(all(not(target_os = "dragonfly"), not(target_os = "macos")))]
     pub unsafe fn destroy(&self) {
         let r = libc::pthread_cond_destroy(self.inner.get());
         debug_assert_eq!(r, 0);
     }

     #[inline]
-    #[cfg(target_os = "dragonfly")]
+    #[cfg(any(target_os = "dragonfly", target_os = "macos"))]
     pub unsafe fn destroy(&self) {
         let r = libc::pthread_cond_destroy(self.inner.get());
         // On DragonFly pthread_cond_destroy() returns EINVAL if called on
--- vendor/libgit2-sys/libgit2/src/streams/stransport.c
+++ vendor/libgit2-sys/libgit2/src/streams/stransport.c
@@ -272,7 +272,7 @@
 	    (ret = SSLSetConnection(st->ctx, st->io)) != noErr ||
 	    (ret = SSLSetSessionOption(st->ctx, kSSLSessionOptionBreakOnServerAuth, true)) != noErr ||
 	    (ret = SSLSetProtocolVersionMin(st->ctx, kTLSProtocol1)) != noErr ||
-	    (ret = SSLSetProtocolVersionMax(st->ctx, kTLSProtocol12)) != noErr ||
+	    (ret = SSLSetProtocolVersionMax(st->ctx, kTLSProtocol1)) != noErr ||
 	    (ret = SSLSetPeerDomainName(st->ctx, host, strlen(host))) != noErr) {
 		CFRelease(st->ctx);
 		git__free(st);
--- vendor/crypto-hash/Cargo.toml
+++ vendor/crypto-hash/Cargo.toml
@@ -23,9 +23,9 @@ license = "MIT"
 repository = "https://github.com/malept/crypto-hash"
 [dependencies.hex]
 version = "0.3"
-[target."cfg(any(target_os = \"macos\", target_os = \"ios\"))".dependencies.commoncrypto]
+[target."cfg(any(target_os = \"ios\"))".dependencies.commoncrypto]
 version = "0.2"
-[target."cfg(not(any(target_os = \"windows\", target_os = \"macos\", target_os = \"ios\")))".dependencies.openssl]
+[target."cfg(not(any(target_os = \"windows\", target_os = \"ios\")))".dependencies.openssl]
 version = "0.10"
 [target."cfg(target_os = \"windows\")".dependencies.winapi]
 version = "0.3"
--- vendor/crypto-hash/src/lib.rs
+++ vendor/crypto-hash/src/lib.rs
@@ -43,23 +43,23 @@
 
 #![warn(missing_docs)]
 
-#[cfg(any(target_os = "macos", target_os = "ios"))]
+#[cfg(any(target_os = "ios"))]
 extern crate commoncrypto;
 extern crate hex;
-#[cfg(not(any(target_os = "macos", target_os = "ios", target_os = "windows")))]
+#[cfg(not(any(target_os = "ios", target_os = "windows")))]
 extern crate openssl;
 #[cfg(target_os = "windows")]
 extern crate winapi;
 
 use std::io::Write;
 
-#[cfg(any(target_os = "macos", target_os = "ios"))]
+#[cfg(any(target_os = "ios"))]
 #[path = "imp/commoncrypto.rs"]
 mod imp;
 #[cfg(target_os = "windows")]
 #[path = "imp/cryptoapi.rs"]
 mod imp;
-#[cfg(not(any(target_os = "macos", target_os = "ios", target_os = "windows")))]
+#[cfg(not(any(target_os = "ios", target_os = "windows")))]
 #[path = "imp/openssl.rs"]
 mod imp;
 
